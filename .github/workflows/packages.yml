name: Elsa Studio 3 Packages
on:
  workflow_dispatch:
  push:
    branches:
      - main
  release:
    types: [ prereleased ]
env:
  package_version: 3.0.0-preview.${{ github.run_number }}
  nuget_feed_feedzio: 'https://f.feedz.io/elsa-workflows/elsa-3/nuget/index.json'
  nuget_feed_nuget: 'https://api.nuget.org/v3/index.json'
  npm_feed_feedzio: 'https://f.feedz.io/elsa-workflows/elsa-3/npm/'
  npm_feed_nuget: 'https://registry.npmjs.org/'

jobs:
  build_nuget_packages:
    name: Build packages
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Verify commit exists in origin/main
        run: |
          git fetch --no-tags --prune --depth=1 origin +refs/heads/*:refs/remotes/origin/*
          git branch --remote --contains | grep origin/main
      - name: Set VERSION variable
        run: echo "VERSION=3.0.0-preview.${{github.run_number}}" >> $GITHUB_ENV
      - name: Build workflow designer client assets
        working-directory: ./src/modules/Elsa.Studio.Workflows.Designer/ClientLib
        run: |
          npm install --force
          npm run build
      - name: Build packages
        run: dotnet build Elsa.Studio.sln --configuration Release /p:Version=${VERSION}
      - name: Test
        run: dotnet test Elsa.Studio.sln --configuration Release /p:Version=${VERSION} --no-build
      - name: Pack packages
        run: dotnet pack Elsa.Studio.sln --configuration Release /p:Version=${VERSION} /p:PackageOutputPath=$(pwd)/packages/nuget
      - name: Publish Custom Elements packages # This generates client assets that we then package as an NPM package.
        run: |
          dotnet publish ./src/hosts/Elsa.Studio.Host.CustomElements --configuration Release -o $(pwd)/packages/wasm /p:Version=${VERSION}
      - name: Prepare npm package
        run: |
          cp $(pwd)/wasm/npm/package.json $(pwd)/wasm/wwwroot/package.json # Copy the package.json file from the NPM package to the wwwroot folder.
          cd $(pwd)/wasm/wwwroot
          npm pack
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: elsa-studio-packages
          path: |
            ./packages/nuget/*nupkg
            ./packages/wasm/wwwroot/elsa-workflows-elsa-studio-wasm-*.tgz
            
        if: ${{ github.event_name == 'release' || github.event_name == 'push'}}
        
  
#  build_npm_packages:
#    name: Build npm packages
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#        
#      - name: Set VERSION variable
#        run: echo "VERSION=${{env.package_version}}" >> $GITHUB_ENV
#        
#      - name: Publish CustomElements
#        run: |
#          dotnet publish ./src/hosts/Elsa.Studio.Host.CustomElements --configuration Release -o ./wasm/ /p:Version=${VERSION}
#
#      - name: Setup Node
#        uses: actions/setup-node@v3
#        with:
#          node-version: 18.12.1
#
#      - name: Prepare npm package
#        run: |
#          cp ./wasm/npm/package.json ./wasm/wwwroot/package.json
#          cd ./wasm/wwwroot
#          npm pack
#
#      - name: Upload npm packages
#        uses: actions/upload-artifact@v3
#        with:
#          name: elsa-studio-npm-packages
#          path: ./wasm/wwwroot/elsa-workflows-elsa-studio-wasm-*.tgz
#        if: ${{ github.event_name == 'release' || github.event_name == 'push'}}
  
#  publish_npm_preview_feedzio:
#    name: Publish npm packages to feedz.io
#    needs: build_npm_packages
#    runs-on: ubuntu-latest
#    timeout-minutes: 10
#    if: ${{ github.event_name == 'release' || github.event_name == 'push'}}
#    steps:
#      - name: Download Packages
#        uses: actions/download-artifact@v3
#        with:
#          name: elsa-studio-npm-packages
#          path: elsa-studio-npm-packages
#
#      - uses: actions/setup-node@v3
#        with:
#          node-version: 18.12.1
#          registry-url: '${{ env.npm_feed_feedzio }}'
#
#      - run: npm publish ./elsa-studio-npm-packages/*.tgz
#        env:
#          NODE_AUTH_TOKEN: ${{ secrets.FEEDZ_API_KEY }}
#  
#  publish_nuget_preview_feedzio:
#    name: Publish nuget packages to feedz.io
#    needs: build_nuget_packages
#    runs-on: ubuntu-latest
#    timeout-minutes: 10
#    if: ${{ github.event_name == 'release' || github.event_name == 'push'}}
#    steps:
#      - name: Download Packages
#        uses: actions/download-artifact@v3
#        with:
#          name: elsa-studio-nuget-packages
#
#      - name: Publish to feedz.io
#        run: dotnet nuget push *.nupkg -k ${{ secrets.FEEDZ_API_KEY }} -s ${{ env.feedz_feed_source }} --skip-duplicate
#
#  publish_nuget_preview_nuget:
#    name: Publish to nuget.org
#    needs: build_nuget_packages
#    runs-on: ubuntu-latest
#    timeout-minutes: 10
#    if: ${{ github.event_name == 'release' || github.event_name == 'prereleased' }}
#    steps:
#      - name: Download Packages
#        uses: actions/download-artifact@v3
#        with:
#          name: elsa-studio-nuget-packages
#
#      - name: Publish to nuget.org
#        run: dotnet nuget push *.nupkg -k ${{ secrets.NUGET_API_KEY }} -s ${{ env.nuget_feed_nuget }} --skip-duplicate
