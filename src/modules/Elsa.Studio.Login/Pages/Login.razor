@page "/login"
@layout BasicLayout
@using Elsa.Studio.Login.Shared
@using Elsa.Studio.Contracts
@using Elsa.Studio.Login.Contracts
@using Microsoft.AspNetCore.Components.Authorization
@attribute [AllowAnonymous]
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IThemeService ThemeService
@inject ICredentialsValidator CredentialsValidator
@inject IJwtAccessor JwtAccessor

<div class="d-flex justify-end flex-grow-1">
    <MudIconButton Icon="@Icons.Material.Outlined.Book" Color="Color.Inherit" Link="https://v3.elsaworkflows.io/" Target="_blank" Title="Documentation"/>
    <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" Link="https://github.com/elsa-workflows/elsa-core" Target="_blank" Title="Source code"/>
</div>

<MudContainer MaxWidth="MaxWidth.Small">
    <MudStack Spacing="10">
        <h2 class="LoginTitle">Elsa 3.0</h2>
        <MudPaper Elevation="1">
            <MudGrid Spacing="0" Justify="Justify.Center">
                <MudItem md="9" xs="7" Class="pa-4 mx-auto my-4">
                    <MudStack Spacing="1">
                        <MudText Typo="Typo.h5">Login</MudText>
                        <EditForm Model="@_model" OnValidSubmit="TryLogin">
                            <div class="d-flex flex-column">
                                <DataAnnotationsValidator/>
                                <MudTextField Label="Username" Required="true" Variant="Variant.Outlined" For="@(() => _model.Username)" @bind-Value="_model.Username" autocomplete="username"/>
                                <MudTextField Label="Password" Required="true" Variant="Variant.Outlined" For="@(() => _model.Password)" @bind-Value="_model.Password" InputType="InputType.Password" autocomplete="current-password"/>
                                <MudCheckBox @bind-Checked="_model.RememberMe" Label="Remember me"/>
                                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="mt-3 align-self-end">Login</MudButton>
                            </div>
                        </EditForm>
                    </MudStack>
                </MudItem>
                @* <MudItem md="5" xs="5"> *@
                @*     <MudImage Src="https://v3.elsaworkflows.io/_next/static/media/elsa-android.3c4de958.png" *@
                @*               Style="@($"height: 100%; max-width: 100%; border-top-right-radius: {CurrentTheme.LayoutProperties.DefaultBorderRadius}; border-bottom-right-radius: {CurrentTheme.LayoutProperties.DefaultBorderRadius}")" *@
                @*               ObjectFit="ObjectFit.Cover"> *@
                @*     </MudImage> *@
                @* </MudItem> *@
            </MudGrid>
        </MudPaper>
    </MudStack>
    <MudText Typo="Typo.subtitle2" Align="Align.Center" Class="mt-2">Elsa Studio v1.0.0</MudText>
</MudContainer>


@code {
    private readonly LoginFormModel _model = new();
    private MudTheme CurrentTheme => ThemeService.CurrentTheme;
    
    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (AuthenticationState == null)
            return;
        
        var state = await AuthenticationState;
        if(state.User.Identity?.IsAuthenticated == true)
            NavigationManager.NavigateTo("/");
    }

    private async Task TryLogin()
    {
        var isValid = await ValidateCredentials(_model.Username, _model.Password);
        if (!isValid)
        {
            Snackbar.Add("Invalid credentials. Please try again", Severity.Error);
            return;
        }

        NavigationManager.NavigateTo("/");
    }

    private async Task<bool> ValidateCredentials(string username, string password)
    {
        var result = await CredentialsValidator.ValidateCredentialsAsync(username, password);

        if (!result.IsAuthenticated)
            return false;

        await JwtAccessor.WriteTokenAsync(TokenNames.AccessToken, result.AccessToken!);
        await JwtAccessor.WriteTokenAsync(TokenNames.RefreshToken, result.RefreshToken!);
        return true;
    }

}

@code
{
    public class LoginFormModel
    {
        public string Username { get; set; } = default!;
        public string Password { get; set; } = default!;
        public bool RememberMe { get; set; }
    }

}