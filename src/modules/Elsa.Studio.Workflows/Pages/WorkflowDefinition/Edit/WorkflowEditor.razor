@using System.Text.Json
@using Elsa.Api.Client.Resources.ActivityDescriptors.Models
@using Elsa.Api.Client.Resources.WorkflowDefinitions.Models
@using Elsa.Studio.Workflows.Designer.Contracts
@using Elsa.Studio.Workflows.Designer.Models
@using Elsa.Studio.Workflows.Models
<MudPaper Class="ma-2" Elevation="0" Outlined="true">
    <MudToolBar Dense="true">
        <MudTooltip Text="Zoom to fit the screen">
            <MudIconButton Icon="@Icons.Material.Outlined.FitScreen" Title="Zoom to fit" OnClick="OnZoomToFitClick"/>
        </MudTooltip>
        <MudTooltip Text="Center">
            <MudIconButton Icon="@Icons.Material.Filled.FilterCenterFocus" Title="Center" OnClick="OnCenterContentClick"/>
        </MudTooltip>
        <MudTooltip Text="Auto layout">
            <MudIconButton Icon="@Icons.Material.Outlined.AutoAwesomeMosaic" Title="Auto layout"/>
        </MudTooltip>
        <MudTooltip Text="Save">
            <MudIconButton Icon="@Icons.Material.Outlined.Save" Title="Save" OnClick="OnSaveClick"/>
        </MudTooltip>
    </MudToolBar>
</MudPaper>
<div @ondragover="@OnDragOver" @ondragover:preventDefault @ondrop="@OnDrop">
    @if (WorkflowDefinition != null)
    {
        <FlowchartDesigner @ref="_designer" Flowchart="@WorkflowDefinition.Root"></FlowchartDesigner>
    }
</div>

@code {

    private int _seed = 3;
    private FlowchartDesigner _designer = default!;

    [CascadingParameter]
    public DragDropManager DragDropManager { get; set; } = default!;

    [Parameter]
    public WorkflowDefinition? WorkflowDefinition { get; set; }

    void OnDragOver(DragEventArgs e)
    {
        if (DragDropManager.Payload is not ActivityDescriptor activityDescriptor)
        {
            e.DataTransfer.DropEffect = "none";
            return;
        }

        e.DataTransfer.DropEffect = "move";
    }

    async Task OnDrop(DragEventArgs e)
    {
        if (DragDropManager.Payload is not ActivityDescriptor activityDescriptor)
        {
            return;
        }

        var x = e.PageX;
        var y = e.PageY;
        var newActivity = new
        {
            Id = activityDescriptor.TypeName + " " + _seed++,
            Type = activityDescriptor.TypeName,
            Metadata = new
            {
                Designer = new
                {
                    Position = new
                    {
                        X = x,
                        Y = y
                    }
                }
            }
        };

        var options = new JsonSerializerOptions
        {
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase
        };

        var activityElement = JsonSerializer.SerializeToElement(newActivity, options);

        await _designer.AddActivityAsync(activityElement);
    }

    private async Task OnZoomToFitClick() => await _designer.ZoomToFitAsync();
    private async Task OnCenterContentClick() => await _designer.CenterContentAsync();

    private async Task OnSaveClick()
    {
        var flowchart = await _designer.ReadFlowchartAsync();
    }

}