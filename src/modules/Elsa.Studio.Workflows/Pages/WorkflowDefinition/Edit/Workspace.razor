@using Elsa.Api.Client.Resources.WorkflowDefinitions.Models
<MudDynamicTabs @ref="@_dynamicTabs" @bind-ActivePanelIndex="@_tabIndex"
                Style="height: 100%"
                AddTab="@AddTabCallback" CloseTab="@CloseTabCallback"
                AddIconToolTip="Click to open a new workflow tab" CloseIconToolTip="Close workflow"
                Elevation="0" ApplyEffectsToContainer>
    @foreach (var tab in _tabs)
    {
        <MudTabPanel ID="@tab.Id" Text="@tab.Label" ShowCloseIcon="@tab.ShowCloseIcon" Style="height: 100%">
            @tab.ChildContent
        </MudTabPanel>
    }

</MudDynamicTabs>

@code
{
    private MudDynamicTabs _dynamicTabs = default!;
    private readonly List<TabView> _tabs = new();
    private int _tabIndex = 0;

    [Parameter]
    public ICollection<WorkflowDefinition> WorkflowDefinitions { get; set; } = new List<WorkflowDefinition>();

    public class TabView
    {
        public string Label { get; set; } = default!;
        public Guid Id { get; set; }
        public bool ShowCloseIcon { get; set; } = true;
        public RenderFragment? ChildContent { get; set; }
    }

    protected override void OnParametersSet()
    {
        SetTabs();
    }

    void AddTab(Guid id)
    {
        WorkflowDefinitions.Add(new WorkflowDefinition());
        SetTabs();
        _tabIndex = _tabs.Count - 1;
    }

    void RemoveTab(Guid id)
    {
        var tabView = _tabs.SingleOrDefault((t) => Equals(t.Id, id));
        if (tabView is not null)
        {
            _tabs.Remove(tabView);
            StateHasChanged();
        }
    }

    void SetTabs()
    {
        _tabs.Clear();

        foreach (var workflowDefinition in WorkflowDefinitions)
        {
            workflowDefinition.Name ??= "New Workflow";
            _tabs.Add(new TabView { Id = Guid.NewGuid(), Label = workflowDefinition.Name, ChildContent = @<WorkflowEditor WorkflowDefinition="@workflowDefinition"></WorkflowEditor>});    
        }
        
        _tabIndex = 0;
        StateHasChanged();
    }

    void AddTabCallback() => AddTab(Guid.NewGuid());
    void CloseTabCallback(MudTabPanel panel) => RemoveTab((Guid)panel.ID);
}