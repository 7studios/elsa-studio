@page "/workflows/definitions"
@using Variant = MudBlazor.Variant
@using Elsa.Api.Client.Resources.WorkflowDefinitions.Models
@using Elsa.Api.Client.Shared.Models
@using Elsa.Studio.Workflows.Contracts
@inject NavigationManager NavigationManager
@inject IWorkflowDefinitionService WorkflowDefinitionService

<PageTitle>Workflow definitions</PageTitle>

<MudContainer MaxWidth="MaxWidth.False">
    <PageHeading Text="Workflow definitions"/>

    <MudTable ServerData="@(new Func<TableState, Task<TableData<WorkflowDefinitionRow>>>(ServerReload))" Dense="false" Hover="true" @ref="_table" Elevation="0" T="WorkflowDefinitionRow" OnRowClick="@RowClick" RowStyle="cursor: pointer;">
        <ToolBarContent>
            <MudButton Variant="Variant.Filled" Color="Color.Primary"  OnClick="@New">Create workflow</MudButton>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>
                <MudTableSortLabel SortLabel="id_field" T="WorkflowDefinitionSummary">ID</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortLabel="name_field" T="WorkflowDefinitionSummary">Name</MudTableSortLabel>
            </MudTh>
            <MudTh Style="text-align:right">
                <MudTableSortLabel SortLabel="version_field" T="WorkflowDefinitionSummary">Version</MudTableSortLabel>
            </MudTh>
            <MudTh>
                Description
            </MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="ID">@context.DefinitionId</MudTd>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Version" Style="text-align:right">@context.Version</MudTd>
            <MudTd DataLabel="Description">@context.Description</MudTd>
            <MudTd DataLabel="" Style="text-align:right">
                <MudIcon Icon="@Icons.TwoTone.Edit" Size="Size.Small" @onclick="Edit"/>
                <MudIcon Icon="@Icons.TwoTone.Delete" Size="Size.Small"/>
            </MudTd>
        </RowTemplate>
        <NoRecordsContent>
            <MudText>No workflow definitions found</MudText>
        </NoRecordsContent>
        <LoadingContent>
            <MudText>Loading...</MudText>
        </LoadingContent>
        <PagerContent>
            <MudTablePager/>
        </PagerContent>
    </MudTable>
</MudContainer>

@code {
    private MudTable<WorkflowDefinitionRow> _table = null!;

    private int _totalCount;
    private string? _searchString;

    private async Task<TableData<WorkflowDefinitionRow>> ServerReload(TableState state)
    {
    // TODO: Load only json-based workflow definitions for now.
    // Later, also allow CLR-based workflows to be "edited" (publish / unpublish / position activities / set variables, etc.)

        const string materializerName = "Json";

        var request = new ListWorkflowDefinitionsRequest
        {
            Page = 0,
            PageSize = 15,
            MaterializerName = materializerName
        };

        var latestWorkflowDefinitionsResponse = await WorkflowDefinitionService.ListAsync(request, VersionOptions.Latest);
        var unpublishedWorkflowDefinitionIds = latestWorkflowDefinitionsResponse.Items.Where(x => !x.IsPublished).Select(x => x.DefinitionId).ToList();

        var publishedWorkflowDefinitions = await WorkflowDefinitionService.ListAsync(new ListWorkflowDefinitionsRequest
        {
            MaterializerName = materializerName,
            DefinitionIds = unpublishedWorkflowDefinitionIds,
        }, VersionOptions.Published);

        _totalCount = latestWorkflowDefinitionsResponse.TotalCount;

        var latestWorkflowDefinitions = latestWorkflowDefinitionsResponse.Items
            .Select(definition =>
            {
                var latestVersionNumber = definition.Version;
                var isPublished = definition.IsPublished;
                var publishedVersion = isPublished
                    ? definition
                    : publishedWorkflowDefinitions.Items.FirstOrDefault(x => x.DefinitionId == definition.DefinitionId);
                var publishedVersionNumber = publishedVersion?.Version?.ToString() ?? "-";

                return new WorkflowDefinitionRow(definition.DefinitionId, publishedVersionNumber, definition.Name, definition.Description, definition.IsPublished);
            })
            .ToList();

        return new TableData<WorkflowDefinitionRow> { TotalItems = _totalCount, Items = latestWorkflowDefinitions };
    }

    private void New()
    {
        Edit();
    }

    private void Edit(string definitionId)
    {
        NavigationManager.NavigateTo($"/workflows/definitions/{definitionId}/edit");
    }

    private void Edit()
    {
        var definitionId = Guid.NewGuid().ToString("N");
        Edit(definitionId);
    }

    private void RowClick(TableRowClickEventArgs<WorkflowDefinitionRow> e)
    {
        Edit(e.Item.DefinitionId);
    }

    private void OnSearch(string text)
    {
        _searchString = text;
        _table.ReloadServerData();
    }

}

@code
{
    private record WorkflowDefinitionRow(string DefinitionId, string Version, string? Name, string? Description, bool IsPublished);
}