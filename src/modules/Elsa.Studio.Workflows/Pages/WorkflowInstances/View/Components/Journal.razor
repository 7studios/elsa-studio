@using Variant = MudBlazor.Variant
@using AlignItems = MudBlazor.AlignItems
@using Elsa.Api.Client.Resources.WorkflowInstances.Models
@using Elsa.Studio.Workflows.Pages.WorkflowInstances.View.Models
<MudTabs Elevation="0" ApplyEffectsToContainer="true">
    <MudTabPanel Text="Journal">
        <MudPaper Class="ma-2" Elevation="0" Outlined="true">
            <MudToolBar Dense="true">
                <MudToggleIconButton Icon="@Icons.Material.Outlined.Timer" ToggledIcon="@Icons.Material.Outlined.AccessTime" Toggled="@(TimeMetricMode == TimeMetricMode.Absolute)" ToggledChanged="OnTimeMetricButtonToggleChanged"></MudToggleIconButton>
            </MudToolBar>
        </MudPaper>
        <div class="pa-4" style="overflow-y: scroll; max-height: calc(100vh - var(--mud-appbar-height) - 120px);">
            <MudTimeline>
                @{
                    var index = 0;
                    var previousRecord = default(ExecutionLogRecord);
                }
                @foreach (var record in ExecutionLogRecords)
                {
                    var activityTypeName = record.ActivityType;
                    var activityDescriptor = ActivityDescriptors![activityTypeName];
                    var displaySettings = ActivityDisplaySettingsRegistry.GetSettings(activityDescriptor.TypeName);
                    var activityIcon = displaySettings.Icon;
                    var activityColor = displaySettings.Color;
                    var eventName = record.EventName;
                    var isEven = index++ % 2 == 0;
                    var timelineAlign = isEven ? TimelineAlign.Default : TimelineAlign.End;
                    var previousRecordCopy = previousRecord;
                    var timeMetric = GetTimeMetric(record, previousRecordCopy);

                    var statusColor =
                        eventName switch
                        {
                            "Started" => Color.Primary,
                            "Completed" => Color.Success,
                            "Faulted" => Color.Error,
                            "Suspended" => Color.Warning,
                            "Resumed" => Color.Warning,
                            _ => Color.Default
                            };

                    <MudTimelineItem Color="statusColor" Size="Size.Small" Variant="Variant.Filled" TimelineAlign="@timelineAlign">
                        <ItemDot>
                            <MudIcon Icon="@activityIcon" Size="Size.Small"></MudIcon>
                        </ItemDot>
                        <ItemContent>
                            <MudText Typo="Typo.button">@activityDescriptor.DisplayName</MudText>
                            <MudText Typo="Typo.body2" Class="mud-text-secondary">@record.EventName</MudText>
                            <MudText Typo="Typo.body2" Class="mud-text-secondary">@record.Timestamp.ToString("t")</MudText>
                        </ItemContent>
                        <ItemOpposite>
                            
                                <div class="d-flex justify-end gap-4">
                                    <MudIcon Icon="@(TimeMetricMode == TimeMetricMode.Relative ? Icons.Material.Outlined.Timer : Icons.Material.Outlined.AccessTime)" Size="Size.Small"></MudIcon>
                                    <MudText Typo="Typo.body2" Class="mud-text-secondary">@timeMetric.ToString("hh\\:mm\\:ss\\.fff")</MudText>
                                </div>
                            
                        </ItemOpposite>
                    </MudTimelineItem>

                    previousRecord = record;
                }
            </MudTimeline>

        </div>
    </MudTabPanel>
</MudTabs>