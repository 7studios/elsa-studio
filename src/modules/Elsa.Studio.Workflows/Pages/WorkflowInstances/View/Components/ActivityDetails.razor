@using Elsa.Api.Client.Extensions
@using Elsa.Api.Client.Resources.ActivityExecutions.Models
<MudTabs Elevation="0" ApplyEffectsToContainer="true">

    <MudTabPanel Text="Activity">
        <div style="@($"max-height: {VisiblePaneHeight}px; overflow-y: scroll;")">
            @{
                var activity = Activity;
                var activityId = activity.GetId();
                var activityName = activity.GetName();
                var activityType = activity.GetTypeName();
                var execution = LastActivityExecution;
                var activityVersion = execution?.ActivityTypeVersion;

                var activityInfo = new Dictionary<string, string?>
                {
                    ["ID"] = activityId,
                    ["Name"] = activityName,
                    ["Type"] = activityType,
                    ["Version"] = activityVersion.ToString(),
                };

                if (execution != null)
                {
                    activityInfo["Instance ID"] = execution.Id;
                }

                var activityState = execution?.ActivityState?
                    .Where(x => !x.Key.StartsWith("_"))
                    .ToDictionary(x => x.Key, x => x.Value?.ToString());
            }

            <div class="pa-4">
                <MudStack>
                    <div>
                        <MudText Typo="Typo.overline" GutterBottom="true" Align="Align.Left">Activity</MudText>
                        <DataPanel Data="activityInfo" HideEmptyValues="true"/>
                    </div>

                    @if (activityState?.Any() == true)
                    {
                        <div>
                            <MudText Typo="Typo.overline" GutterBottom="true" Align="Align.Left">State</MudText>
                            <DataPanel Data="@activityState" HideEmptyValues="true"/>
                        </div>
                    }
                </MudStack>
            </div>

        </div>
    </MudTabPanel>

    <MudTabPanel Text="Executions" BadgeColor="Color.Primary" BadgeData="ActivityExecutions.Count">
        <div style="@($"max-height: {VisiblePaneHeight}px; overflow-y: scroll;")">

            <div class="pa-4">

                <MudStack Row="true">
                    <MudTable
                        T="ActivityExecutionRecordTableRow"
                        Items="Items"
                        Dense="true"
                        Bordered="false"
                        Striped="false"
                        Elevation="0"
                        Outlined="true"
                        Hover="true"
                        RowStyle="cursor: pointer;"
                        OnRowClick="@OnActivityExecutionClicked">
                        <HeaderContent>
                            <MudTh>#</MudTh>
                            <MudTh>Started</MudTh>
                            <MudTh>Completed</MudTh>
                            <MudTh>Duration</MudTh>
                            <MudTh>Status</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            @{
                                var record = context.ActivityExecution;
                            }
                            <MudTh>@context.Number</MudTh>
                            <MudTd>@record.StartedAt.ToString("g")</MudTd>
                            <MudTd>@record.CompletedAt?.ToString("g")</MudTd>
                            <MudTd>@(record.CompletedAt != null ? (record.CompletedAt - record.StartedAt).Value.ToString("g") : "")</MudTd>
                            <MudTd>@(record.CompletedAt == null ? record.HasBookmarks ? "Suspended" : "Executing" : "Completed")</MudTd>
                        </RowTemplate>
                        <PagerContent>
                            <MudTablePager/>
                        </PagerContent>
                    </MudTable>

                    @{
                        var activityState = SelectedItem?.ActivityState?
                            .Where(x => !x.Key.StartsWith("_"))
                            .ToDictionary(x => x.Key, x => x.Value?.ToString());
                    }

                    <div>
                        @if (activityState?.Any() == true)
                        {
                            <div>
                                <DataPanel Data="@activityState" HideEmptyValues="true"/>
                            </div>
                        }
                    </div>
                </MudStack>
            </div>
        </div>
    </MudTabPanel>
</MudTabs>