@using Elsa.Api.Client.Extensions
@using Elsa.Api.Client.Resources.ActivityExecutions.Models
<MudTabs Elevation="0" ApplyEffectsToContainer="true">

    <MudTabPanel Text="Activity">
        <ScrollableWell MaxHeight="VisiblePaneHeight">
            @{
                var activity = Activity;
                var activityId = activity.GetId();
                var activityName = activity.GetName();
                var activityType = activity.GetTypeName();
                var execution = LastActivityExecution;
                var activityVersion = execution?.ActivityTypeVersion;
                var exception = execution?.Exception;

                var activityInfo = new Dictionary<string, string?>
                {
                    ["ID"] = activityId,
                    ["Name"] = activityName,
                    ["Type"] = activityType,
                    ["Version"] = activityVersion.ToString()
                };

                if (execution != null)
                {
                    activityInfo["Status"] = execution.Status.ToString();
                    activityInfo["Instance ID"] = execution.Id;
                }

                var exceptionData = new Dictionary<string, string?>();

                if (exception != null)
                {
                    exceptionData["Message"] = exception.Message;
                    exceptionData["InnerException"] = exception.InnerException?.Type + ": " + exception.InnerException?.Message;
                    exceptionData["StackTrace"] = exception.StackTrace;
                }

                var activityState = execution?.ActivityState?
                    .Where(x => !x.Key.StartsWith("_"))
                    .ToDictionary(x => x.Key, x => x.Value?.ToString());
            }

            <MudStack>
                <div>
                    <MudText Typo="Typo.overline" GutterBottom="true" Align="Align.Left">Activity</MudText>
                    <DataPanel Data="activityInfo" HideEmptyValues="true"/>
                </div>

                @if (exceptionData.Any())
                {
                    <div>
                        <MudText Typo="Typo.overline" GutterBottom="true" Align="Align.Left">Fault</MudText>
                        <DataPanel Data="exceptionData" HideEmptyValues="true"/>
                    </div>
                }

                @if (activityState?.Any() == true)
                {
                    <div>
                        <MudText Typo="Typo.overline" GutterBottom="true" Align="Align.Left">State</MudText>
                        <DataPanel Data="@activityState" HideEmptyValues="true"/>
                    </div>
                }
            </MudStack>
        </ScrollableWell>
    </MudTabPanel>

    <MudTabPanel Text="Executions" BadgeColor="Color.Primary" BadgeData="ActivityExecutions.Count">
        <ScrollableWell MaxHeight="VisiblePaneHeight">

            <MudStack Row="true">
                <MudTable
                    T="ActivityExecutionRecordTableRow"
                    Items="Items"
                    Dense="true"
                    Bordered="false"
                    Striped="false"
                    Elevation="0"
                    Outlined="true"
                    Hover="true"
                    RowStyle="cursor: pointer;"
                    OnRowClick="@OnActivityExecutionClicked">
                    <HeaderContent>
                        <MudTh>#</MudTh>
                        <MudTh>Started</MudTh>
                        <MudTh>Completed</MudTh>
                        <MudTh>Duration</MudTh>
                        <MudTh>Status</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        @{
                            var record = context.ActivityExecution;
                        }
                        <MudTh>@context.Number</MudTh>
                        <MudTd>@record.StartedAt.ToString("g")</MudTd>
                        <MudTd>@record.CompletedAt?.ToString("g")</MudTd>
                        <MudTd>@(record.CompletedAt != null ? (record.CompletedAt - record.StartedAt).Value.ToString("g") : "")</MudTd>
                        <MudTd>@(record.CompletedAt == null ? record.HasBookmarks ? "Suspended" : "Executing" : "Completed")</MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager/>
                    </PagerContent>
                </MudTable>

                @{
                    var activityState = SelectedItem?.ActivityState?
                        .Where(x => !x.Key.StartsWith("_"))
                        .ToDictionary(x => x.Key, x => x.Value?.ToString());
                }

                <div>
                    @if (activityState?.Any() == true)
                    {
                        <div>
                            <DataPanel Data="@activityState" HideEmptyValues="true"/>
                        </div>
                    }
                </div>
            </MudStack>
        </ScrollableWell>
    </MudTabPanel>
</MudTabs>